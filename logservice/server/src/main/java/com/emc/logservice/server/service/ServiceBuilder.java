package com.emc.logservice.server.service;

import com.emc.logservice.contracts.StreamSegmentStore;
import com.emc.logservice.server.*;
import com.emc.logservice.server.containers.StreamSegmentContainerFactory;
import com.emc.logservice.server.logs.DurableLogFactory;
import com.emc.logservice.server.reading.ReadIndexFactory;
import com.emc.logservice.storageabstraction.DurableDataLogFactory;
import com.emc.logservice.storageabstraction.StorageFactory;

import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Helps create StreamSegmentStore Instances.
 */
public abstract class ServiceBuilder implements AutoCloseable {
    //region Members

    protected final SegmentToContainerMapper segmentToContainerMapper;
    private OperationLogFactory operationLogFactory;
    private CacheFactory cacheFactory;
    private DurableDataLogFactory dataLogFactory;
    private StorageFactory storageFactory;
    private SegmentContainerFactory containerFactory;
    private SegmentContainerRegistry containerRegistry;
    private SegmentContainerManager containerManager;
    private MetadataRepository metadataRepository;

    //endregion

    //region Constructor

    public ServiceBuilder(int containerCount) {
        this.segmentToContainerMapper = new SegmentToContainerMapper(containerCount);
    }

    //endregion

    //region AutoCloseable Implementation

    @Override
    public void close() {
        if (this.containerManager != null) {
            this.containerManager.close();
            this.containerManager = null;
        }

        if (this.containerRegistry != null) {
            this.containerRegistry.close();
            this.containerRegistry = null;
        }

        if (this.dataLogFactory != null) {
            this.dataLogFactory.close();
            this.dataLogFactory = null;
        }

        if (this.storageFactory != null) {
            this.storageFactory.close();
            this.storageFactory = null;
        }
    }

    //endregion

    //region Service Builder

    /**
     * Creates a new instance of StreamSegmentStore using the components generated by this class.
     *
     * @return
     */
    public StreamSegmentStore createStreamSegmentService() {
        return new StreamSegmentService(getSegmentContainerRegistry(), this.segmentToContainerMapper);
    }

    /**
     * Creates or gets the instance of SegmentContainerManager used throughout this ServiceBuilder.
     *
     * @return
     */
    public SegmentContainerManager getContainerManager() {
        return getSingleton(this.containerManager, this::createSegmentContainerManager, cr -> this.containerManager = cr);
    }

    protected SegmentContainerRegistry getSegmentContainerRegistry() {
        return getSingleton(this.containerRegistry, this::createSegmentContainerRegistry, cr -> this.containerRegistry = cr);
    }

    //endregion

    //region Component Builders

    protected abstract DurableDataLogFactory createDataLogFactory();

    protected abstract StorageFactory createStorageFactory();

    protected abstract MetadataRepository createMetadataRepository();

    protected abstract SegmentContainerManager createSegmentContainerManager();

    protected CacheFactory createCacheFactory() {
        return new ReadIndexFactory();
    }

    private SegmentContainerFactory createSegmentContainerFactory() {
        MetadataRepository metadataRepository = getSingleton(this.metadataRepository, this::createMetadataRepository, mr -> this.metadataRepository = mr);
        CacheFactory cacheFactory = getSingleton(this.cacheFactory, this::createCacheFactory, cf -> this.cacheFactory = cf);
        StorageFactory storageFactory = getSingleton(this.storageFactory, this::createStorageFactory, sf -> this.storageFactory = sf);
        OperationLogFactory operationLogFactory = getSingleton(this.operationLogFactory, this::createOperationLogFactory, olf -> this.operationLogFactory = olf);
        return new StreamSegmentContainerFactory(metadataRepository, operationLogFactory, cacheFactory, storageFactory);
    }

    private SegmentContainerRegistry createSegmentContainerRegistry() {
        SegmentContainerFactory containerFactory = getSingleton(this.containerFactory, this::createSegmentContainerFactory, scf -> this.containerFactory = scf);
        return new StreamSegmentContainerRegistry(containerFactory);
    }

    private OperationLogFactory createOperationLogFactory() {
        DurableDataLogFactory dataLogFactory = getSingleton(this.dataLogFactory, this::createDataLogFactory, dlf -> this.dataLogFactory = dlf);
        return new DurableLogFactory(dataLogFactory);
    }

    private <T> T getSingleton(T instance, Supplier<T> creator, Consumer<T> setter) {
        if (instance != null) {
            return instance;
        }

        instance = creator.get();
        setter.accept(instance);
        return instance;
    }

    //endregion
}
