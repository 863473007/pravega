/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.emc.pravega.controller.stream.api.v1;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-09-26")
public class ControllerService {

  public interface Iface {

    public Status createStream(StreamConfig streamConfig) throws org.apache.thrift.TException;

    public Status alterStream(StreamConfig streamConfig) throws org.apache.thrift.TException;

    public List<SegmentId> getCurrentSegments(String stream) throws org.apache.thrift.TException;

    public List<Position> getPositions(String stream, long timestamp, int count) throws org.apache.thrift.TException;

    public List<Position> updatePositions(String stream, List<Position> positions) throws org.apache.thrift.TException;

    public SegmentUri getURI(String stream, int segmentNumber) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void alterStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCurrentSegments(String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPositions(String stream, long timestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePositions(String stream, List<Position> positions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getURI(String stream, int segmentNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Status createStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      send_createStream(streamConfig);
      return recv_createStream();
    }

    public void send_createStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      createStream_args args = new createStream_args();
      args.setStreamConfig(streamConfig);
      sendBase("createStream", args);
    }

    public Status recv_createStream() throws org.apache.thrift.TException
    {
      createStream_result result = new createStream_result();
      receiveBase(result, "createStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createStream failed: unknown result");
    }

    public Status alterStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      send_alterStream(streamConfig);
      return recv_alterStream();
    }

    public void send_alterStream(StreamConfig streamConfig) throws org.apache.thrift.TException
    {
      alterStream_args args = new alterStream_args();
      args.setStreamConfig(streamConfig);
      sendBase("alterStream", args);
    }

    public Status recv_alterStream() throws org.apache.thrift.TException
    {
      alterStream_result result = new alterStream_result();
      receiveBase(result, "alterStream");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "alterStream failed: unknown result");
    }

    public List<SegmentId> getCurrentSegments(String stream) throws org.apache.thrift.TException
    {
      send_getCurrentSegments(stream);
      return recv_getCurrentSegments();
    }

    public void send_getCurrentSegments(String stream) throws org.apache.thrift.TException
    {
      getCurrentSegments_args args = new getCurrentSegments_args();
      args.setStream(stream);
      sendBase("getCurrentSegments", args);
    }

    public List<SegmentId> recv_getCurrentSegments() throws org.apache.thrift.TException
    {
      getCurrentSegments_result result = new getCurrentSegments_result();
      receiveBase(result, "getCurrentSegments");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentSegments failed: unknown result");
    }

    public List<Position> getPositions(String stream, long timestamp, int count) throws org.apache.thrift.TException
    {
      send_getPositions(stream, timestamp, count);
      return recv_getPositions();
    }

    public void send_getPositions(String stream, long timestamp, int count) throws org.apache.thrift.TException
    {
      getPositions_args args = new getPositions_args();
      args.setStream(stream);
      args.setTimestamp(timestamp);
      args.setCount(count);
      sendBase("getPositions", args);
    }

    public List<Position> recv_getPositions() throws org.apache.thrift.TException
    {
      getPositions_result result = new getPositions_result();
      receiveBase(result, "getPositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPositions failed: unknown result");
    }

    public List<Position> updatePositions(String stream, List<Position> positions) throws org.apache.thrift.TException
    {
      send_updatePositions(stream, positions);
      return recv_updatePositions();
    }

    public void send_updatePositions(String stream, List<Position> positions) throws org.apache.thrift.TException
    {
      updatePositions_args args = new updatePositions_args();
      args.setStream(stream);
      args.setPositions(positions);
      sendBase("updatePositions", args);
    }

    public List<Position> recv_updatePositions() throws org.apache.thrift.TException
    {
      updatePositions_result result = new updatePositions_result();
      receiveBase(result, "updatePositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updatePositions failed: unknown result");
    }

    public SegmentUri getURI(String stream, int segmentNumber) throws org.apache.thrift.TException
    {
      send_getURI(stream, segmentNumber);
      return recv_getURI();
    }

    public void send_getURI(String stream, int segmentNumber) throws org.apache.thrift.TException
    {
      getURI_args args = new getURI_args();
      args.setStream(stream);
      args.setSegmentNumber(segmentNumber);
      sendBase("getURI", args);
    }

    public SegmentUri recv_getURI() throws org.apache.thrift.TException
    {
      getURI_result result = new getURI_result();
      receiveBase(result, "getURI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getURI failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createStream_call method_call = new createStream_call(streamConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StreamConfig streamConfig;
      public createStream_call(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamConfig = streamConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createStream_args args = new createStream_args();
        args.setStreamConfig(streamConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createStream();
      }
    }

    public void alterStream(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alterStream_call method_call = new alterStream_call(streamConfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alterStream_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StreamConfig streamConfig;
      public alterStream_call(StreamConfig streamConfig, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamConfig = streamConfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alterStream", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alterStream_args args = new alterStream_args();
        args.setStreamConfig(streamConfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Status getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_alterStream();
      }
    }

    public void getCurrentSegments(String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentSegments_call method_call = new getCurrentSegments_call(stream, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentSegments_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stream;
      public getCurrentSegments_call(String stream, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stream = stream;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentSegments", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentSegments_args args = new getCurrentSegments_args();
        args.setStream(stream);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<SegmentId> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentSegments();
      }
    }

    public void getPositions(String stream, long timestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPositions_call method_call = new getPositions_call(stream, timestamp, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPositions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stream;
      private long timestamp;
      private int count;
      public getPositions_call(String stream, long timestamp, int count, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stream = stream;
        this.timestamp = timestamp;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPositions_args args = new getPositions_args();
        args.setStream(stream);
        args.setTimestamp(timestamp);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Position> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPositions();
      }
    }

    public void updatePositions(String stream, List<Position> positions, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePositions_call method_call = new updatePositions_call(stream, positions, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePositions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stream;
      private List<Position> positions;
      public updatePositions_call(String stream, List<Position> positions, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stream = stream;
        this.positions = positions;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePositions_args args = new updatePositions_args();
        args.setStream(stream);
        args.setPositions(positions);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Position> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updatePositions();
      }
    }

    public void getURI(String stream, int segmentNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getURI_call method_call = new getURI_call(stream, segmentNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getURI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stream;
      private int segmentNumber;
      public getURI_call(String stream, int segmentNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.stream = stream;
        this.segmentNumber = segmentNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getURI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getURI_args args = new getURI_args();
        args.setStream(stream);
        args.setSegmentNumber(segmentNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SegmentUri getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getURI();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createStream", new createStream());
      processMap.put("alterStream", new alterStream());
      processMap.put("getCurrentSegments", new getCurrentSegments());
      processMap.put("getPositions", new getPositions());
      processMap.put("updatePositions", new updatePositions());
      processMap.put("getURI", new getURI());
      return processMap;
    }

    public static class createStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createStream_args> {
      public createStream() {
        super("createStream");
      }

      public createStream_args getEmptyArgsInstance() {
        return new createStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createStream_result getResult(I iface, createStream_args args) throws org.apache.thrift.TException {
        createStream_result result = new createStream_result();
        result.success = iface.createStream(args.streamConfig);
        return result;
      }
    }

    public static class alterStream<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alterStream_args> {
      public alterStream() {
        super("alterStream");
      }

      public alterStream_args getEmptyArgsInstance() {
        return new alterStream_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public alterStream_result getResult(I iface, alterStream_args args) throws org.apache.thrift.TException {
        alterStream_result result = new alterStream_result();
        result.success = iface.alterStream(args.streamConfig);
        return result;
      }
    }

    public static class getCurrentSegments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentSegments_args> {
      public getCurrentSegments() {
        super("getCurrentSegments");
      }

      public getCurrentSegments_args getEmptyArgsInstance() {
        return new getCurrentSegments_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentSegments_result getResult(I iface, getCurrentSegments_args args) throws org.apache.thrift.TException {
        getCurrentSegments_result result = new getCurrentSegments_result();
        result.success = iface.getCurrentSegments(args.stream);
        return result;
      }
    }

    public static class getPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPositions_args> {
      public getPositions() {
        super("getPositions");
      }

      public getPositions_args getEmptyArgsInstance() {
        return new getPositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPositions_result getResult(I iface, getPositions_args args) throws org.apache.thrift.TException {
        getPositions_result result = new getPositions_result();
        result.success = iface.getPositions(args.stream, args.timestamp, args.count);
        return result;
      }
    }

    public static class updatePositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePositions_args> {
      public updatePositions() {
        super("updatePositions");
      }

      public updatePositions_args getEmptyArgsInstance() {
        return new updatePositions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePositions_result getResult(I iface, updatePositions_args args) throws org.apache.thrift.TException {
        updatePositions_result result = new updatePositions_result();
        result.success = iface.updatePositions(args.stream, args.positions);
        return result;
      }
    }

    public static class getURI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getURI_args> {
      public getURI() {
        super("getURI");
      }

      public getURI_args getEmptyArgsInstance() {
        return new getURI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getURI_result getResult(I iface, getURI_args args) throws org.apache.thrift.TException {
        getURI_result result = new getURI_result();
        result.success = iface.getURI(args.stream, args.segmentNumber);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createStream", new createStream());
      processMap.put("alterStream", new alterStream());
      processMap.put("getCurrentSegments", new getCurrentSegments());
      processMap.put("getPositions", new getPositions());
      processMap.put("updatePositions", new updatePositions());
      processMap.put("getURI", new getURI());
      return processMap;
    }

    public static class createStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createStream_args, Status> {
      public createStream() {
        super("createStream");
      }

      public createStream_args getEmptyArgsInstance() {
        return new createStream_args();
      }

      public AsyncMethodCallback<Status> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            createStream_result result = new createStream_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createStream_result result = new createStream_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createStream_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws TException {
        iface.createStream(args.streamConfig,resultHandler);
      }
    }

    public static class alterStream<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, alterStream_args, Status> {
      public alterStream() {
        super("alterStream");
      }

      public alterStream_args getEmptyArgsInstance() {
        return new alterStream_args();
      }

      public AsyncMethodCallback<Status> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Status>() { 
          public void onComplete(Status o) {
            alterStream_result result = new alterStream_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            alterStream_result result = new alterStream_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, alterStream_args args, org.apache.thrift.async.AsyncMethodCallback<Status> resultHandler) throws TException {
        iface.alterStream(args.streamConfig,resultHandler);
      }
    }

    public static class getCurrentSegments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentSegments_args, List<SegmentId>> {
      public getCurrentSegments() {
        super("getCurrentSegments");
      }

      public getCurrentSegments_args getEmptyArgsInstance() {
        return new getCurrentSegments_args();
      }

      public AsyncMethodCallback<List<SegmentId>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<SegmentId>>() { 
          public void onComplete(List<SegmentId> o) {
            getCurrentSegments_result result = new getCurrentSegments_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentSegments_result result = new getCurrentSegments_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentSegments_args args, org.apache.thrift.async.AsyncMethodCallback<List<SegmentId>> resultHandler) throws TException {
        iface.getCurrentSegments(args.stream,resultHandler);
      }
    }

    public static class getPositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPositions_args, List<Position>> {
      public getPositions() {
        super("getPositions");
      }

      public getPositions_args getEmptyArgsInstance() {
        return new getPositions_args();
      }

      public AsyncMethodCallback<List<Position>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Position>>() { 
          public void onComplete(List<Position> o) {
            getPositions_result result = new getPositions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPositions_result result = new getPositions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPositions_args args, org.apache.thrift.async.AsyncMethodCallback<List<Position>> resultHandler) throws TException {
        iface.getPositions(args.stream, args.timestamp, args.count,resultHandler);
      }
    }

    public static class updatePositions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePositions_args, List<Position>> {
      public updatePositions() {
        super("updatePositions");
      }

      public updatePositions_args getEmptyArgsInstance() {
        return new updatePositions_args();
      }

      public AsyncMethodCallback<List<Position>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Position>>() { 
          public void onComplete(List<Position> o) {
            updatePositions_result result = new updatePositions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePositions_result result = new updatePositions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePositions_args args, org.apache.thrift.async.AsyncMethodCallback<List<Position>> resultHandler) throws TException {
        iface.updatePositions(args.stream, args.positions,resultHandler);
      }
    }

    public static class getURI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getURI_args, SegmentUri> {
      public getURI() {
        super("getURI");
      }

      public getURI_args getEmptyArgsInstance() {
        return new getURI_args();
      }

      public AsyncMethodCallback<SegmentUri> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SegmentUri>() { 
          public void onComplete(SegmentUri o) {
            getURI_result result = new getURI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getURI_result result = new getURI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getURI_args args, org.apache.thrift.async.AsyncMethodCallback<SegmentUri> resultHandler) throws TException {
        iface.getURI(args.stream, args.segmentNumber,resultHandler);
      }
    }

  }

  public static class createStream_args implements org.apache.thrift.TBase<createStream_args, createStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<createStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStream_args");

    private static final org.apache.thrift.protocol.TField STREAM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("streamConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStream_argsTupleSchemeFactory());
    }

    private StreamConfig streamConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_CONFIG((short)1, "streamConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_CONFIG
            return STREAM_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("streamConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStream_args.class, metaDataMap);
    }

    public createStream_args() {
    }

    public createStream_args(
      StreamConfig streamConfig)
    {
      this();
      this.streamConfig = streamConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStream_args(createStream_args other) {
      if (other.isSetStreamConfig()) {
        this.streamConfig = new StreamConfig(other.streamConfig);
      }
    }

    public createStream_args deepCopy() {
      return new createStream_args(this);
    }

    @Override
    public void clear() {
      this.streamConfig = null;
    }

    public StreamConfig getStreamConfig() {
      return this.streamConfig;
    }

    public createStream_args setStreamConfig(StreamConfig streamConfig) {
      this.streamConfig = streamConfig;
      return this;
    }

    public void unsetStreamConfig() {
      this.streamConfig = null;
    }

    /** Returns true if field streamConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamConfig() {
      return this.streamConfig != null;
    }

    public void setStreamConfigIsSet(boolean value) {
      if (!value) {
        this.streamConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_CONFIG:
        if (value == null) {
          unsetStreamConfig();
        } else {
          setStreamConfig((StreamConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_CONFIG:
        return getStreamConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_CONFIG:
        return isSetStreamConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStream_args)
        return this.equals((createStream_args)that);
      return false;
    }

    public boolean equals(createStream_args that) {
      if (that == null)
        return false;

      boolean this_present_streamConfig = true && this.isSetStreamConfig();
      boolean that_present_streamConfig = true && that.isSetStreamConfig();
      if (this_present_streamConfig || that_present_streamConfig) {
        if (!(this_present_streamConfig && that_present_streamConfig))
          return false;
        if (!this.streamConfig.equals(that.streamConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_streamConfig = true && (isSetStreamConfig());
      list.add(present_streamConfig);
      if (present_streamConfig)
        list.add(streamConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(createStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStreamConfig()).compareTo(other.isSetStreamConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamConfig, other.streamConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStream_args(");
      boolean first = true;

      sb.append("streamConfig:");
      if (this.streamConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.streamConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (streamConfig != null) {
        streamConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStream_argsStandardSchemeFactory implements SchemeFactory {
      public createStream_argsStandardScheme getScheme() {
        return new createStream_argsStandardScheme();
      }
    }

    private static class createStream_argsStandardScheme extends StandardScheme<createStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamConfig = new StreamConfig();
                struct.streamConfig.read(iprot);
                struct.setStreamConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamConfig != null) {
          oprot.writeFieldBegin(STREAM_CONFIG_FIELD_DESC);
          struct.streamConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStream_argsTupleSchemeFactory implements SchemeFactory {
      public createStream_argsTupleScheme getScheme() {
        return new createStream_argsTupleScheme();
      }
    }

    private static class createStream_argsTupleScheme extends TupleScheme<createStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamConfig()) {
          struct.streamConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamConfig = new StreamConfig();
          struct.streamConfig.read(iprot);
          struct.setStreamConfigIsSet(true);
        }
      }
    }

  }

  public static class createStream_result implements org.apache.thrift.TBase<createStream_result, createStream_result._Fields>, java.io.Serializable, Cloneable, Comparable<createStream_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStream_resultTupleSchemeFactory());
    }

    private Status success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStream_result.class, metaDataMap);
    }

    public createStream_result() {
    }

    public createStream_result(
      Status success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStream_result(createStream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createStream_result deepCopy() {
      return new createStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see Status
     */
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public createStream_result setSuccess(Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStream_result)
        return this.equals((createStream_result)that);
      return false;
    }

    public boolean equals(createStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(createStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStream_resultStandardSchemeFactory implements SchemeFactory {
      public createStream_resultStandardScheme getScheme() {
        return new createStream_resultStandardScheme();
      }
    }

    private static class createStream_resultStandardScheme extends StandardScheme<createStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStream_resultTupleSchemeFactory implements SchemeFactory {
      public createStream_resultTupleScheme getScheme() {
        return new createStream_resultTupleScheme();
      }
    }

    private static class createStream_resultTupleScheme extends TupleScheme<createStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class alterStream_args implements org.apache.thrift.TBase<alterStream_args, alterStream_args._Fields>, java.io.Serializable, Cloneable, Comparable<alterStream_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alterStream_args");

    private static final org.apache.thrift.protocol.TField STREAM_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("streamConfig", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alterStream_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alterStream_argsTupleSchemeFactory());
    }

    private StreamConfig streamConfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_CONFIG((short)1, "streamConfig");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_CONFIG
            return STREAM_CONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("streamConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alterStream_args.class, metaDataMap);
    }

    public alterStream_args() {
    }

    public alterStream_args(
      StreamConfig streamConfig)
    {
      this();
      this.streamConfig = streamConfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alterStream_args(alterStream_args other) {
      if (other.isSetStreamConfig()) {
        this.streamConfig = new StreamConfig(other.streamConfig);
      }
    }

    public alterStream_args deepCopy() {
      return new alterStream_args(this);
    }

    @Override
    public void clear() {
      this.streamConfig = null;
    }

    public StreamConfig getStreamConfig() {
      return this.streamConfig;
    }

    public alterStream_args setStreamConfig(StreamConfig streamConfig) {
      this.streamConfig = streamConfig;
      return this;
    }

    public void unsetStreamConfig() {
      this.streamConfig = null;
    }

    /** Returns true if field streamConfig is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamConfig() {
      return this.streamConfig != null;
    }

    public void setStreamConfigIsSet(boolean value) {
      if (!value) {
        this.streamConfig = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_CONFIG:
        if (value == null) {
          unsetStreamConfig();
        } else {
          setStreamConfig((StreamConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_CONFIG:
        return getStreamConfig();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_CONFIG:
        return isSetStreamConfig();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alterStream_args)
        return this.equals((alterStream_args)that);
      return false;
    }

    public boolean equals(alterStream_args that) {
      if (that == null)
        return false;

      boolean this_present_streamConfig = true && this.isSetStreamConfig();
      boolean that_present_streamConfig = true && that.isSetStreamConfig();
      if (this_present_streamConfig || that_present_streamConfig) {
        if (!(this_present_streamConfig && that_present_streamConfig))
          return false;
        if (!this.streamConfig.equals(that.streamConfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_streamConfig = true && (isSetStreamConfig());
      list.add(present_streamConfig);
      if (present_streamConfig)
        list.add(streamConfig);

      return list.hashCode();
    }

    @Override
    public int compareTo(alterStream_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStreamConfig()).compareTo(other.isSetStreamConfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamConfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamConfig, other.streamConfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alterStream_args(");
      boolean first = true;

      sb.append("streamConfig:");
      if (this.streamConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.streamConfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (streamConfig != null) {
        streamConfig.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alterStream_argsStandardSchemeFactory implements SchemeFactory {
      public alterStream_argsStandardScheme getScheme() {
        return new alterStream_argsStandardScheme();
      }
    }

    private static class alterStream_argsStandardScheme extends StandardScheme<alterStream_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alterStream_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_CONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.streamConfig = new StreamConfig();
                struct.streamConfig.read(iprot);
                struct.setStreamConfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alterStream_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamConfig != null) {
          oprot.writeFieldBegin(STREAM_CONFIG_FIELD_DESC);
          struct.streamConfig.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alterStream_argsTupleSchemeFactory implements SchemeFactory {
      public alterStream_argsTupleScheme getScheme() {
        return new alterStream_argsTupleScheme();
      }
    }

    private static class alterStream_argsTupleScheme extends TupleScheme<alterStream_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alterStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamConfig()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamConfig()) {
          struct.streamConfig.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alterStream_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streamConfig = new StreamConfig();
          struct.streamConfig.read(iprot);
          struct.setStreamConfigIsSet(true);
        }
      }
    }

  }

  public static class alterStream_result implements org.apache.thrift.TBase<alterStream_result, alterStream_result._Fields>, java.io.Serializable, Cloneable, Comparable<alterStream_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alterStream_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new alterStream_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new alterStream_resultTupleSchemeFactory());
    }

    private Status success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see Status
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alterStream_result.class, metaDataMap);
    }

    public alterStream_result() {
    }

    public alterStream_result(
      Status success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alterStream_result(alterStream_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public alterStream_result deepCopy() {
      return new alterStream_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see Status
     */
    public Status getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see Status
     */
    public alterStream_result setSuccess(Status success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Status)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alterStream_result)
        return this.equals((alterStream_result)that);
      return false;
    }

    public boolean equals(alterStream_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(alterStream_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alterStream_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alterStream_resultStandardSchemeFactory implements SchemeFactory {
      public alterStream_resultStandardScheme getScheme() {
        return new alterStream_resultStandardScheme();
      }
    }

    private static class alterStream_resultStandardScheme extends StandardScheme<alterStream_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alterStream_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.emc.pravega.controller.stream.api.v1.Status.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alterStream_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alterStream_resultTupleSchemeFactory implements SchemeFactory {
      public alterStream_resultTupleScheme getScheme() {
        return new alterStream_resultTupleScheme();
      }
    }

    private static class alterStream_resultTupleScheme extends TupleScheme<alterStream_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alterStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alterStream_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.emc.pravega.controller.stream.api.v1.Status.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentSegments_args implements org.apache.thrift.TBase<getCurrentSegments_args, getCurrentSegments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentSegments_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentSegments_args");

    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentSegments_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentSegments_argsTupleSchemeFactory());
    }

    private String stream; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM((short)1, "stream");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM
            return STREAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentSegments_args.class, metaDataMap);
    }

    public getCurrentSegments_args() {
    }

    public getCurrentSegments_args(
      String stream)
    {
      this();
      this.stream = stream;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentSegments_args(getCurrentSegments_args other) {
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
    }

    public getCurrentSegments_args deepCopy() {
      return new getCurrentSegments_args(this);
    }

    @Override
    public void clear() {
      this.stream = null;
    }

    public String getStream() {
      return this.stream;
    }

    public getCurrentSegments_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM:
        return getStream();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM:
        return isSetStream();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentSegments_args)
        return this.equals((getCurrentSegments_args)that);
      return false;
    }

    public boolean equals(getCurrentSegments_args that) {
      if (that == null)
        return false;

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentSegments_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentSegments_args(");
      boolean first = true;

      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentSegments_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentSegments_argsStandardScheme getScheme() {
        return new getCurrentSegments_argsStandardScheme();
      }
    }

    private static class getCurrentSegments_argsStandardScheme extends StandardScheme<getCurrentSegments_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentSegments_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentSegments_argsTupleScheme getScheme() {
        return new getCurrentSegments_argsTupleScheme();
      }
    }

    private static class getCurrentSegments_argsTupleScheme extends TupleScheme<getCurrentSegments_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStream()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
      }
    }

  }

  public static class getCurrentSegments_result implements org.apache.thrift.TBase<getCurrentSegments_result, getCurrentSegments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentSegments_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentSegments_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentSegments_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentSegments_resultTupleSchemeFactory());
    }

    private List<SegmentId> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentId.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentSegments_result.class, metaDataMap);
    }

    public getCurrentSegments_result() {
    }

    public getCurrentSegments_result(
      List<SegmentId> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentSegments_result(getCurrentSegments_result other) {
      if (other.isSetSuccess()) {
        List<SegmentId> __this__success = new ArrayList<SegmentId>(other.success.size());
        for (SegmentId other_element : other.success) {
          __this__success.add(new SegmentId(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCurrentSegments_result deepCopy() {
      return new getCurrentSegments_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<SegmentId> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(SegmentId elem) {
      if (this.success == null) {
        this.success = new ArrayList<SegmentId>();
      }
      this.success.add(elem);
    }

    public List<SegmentId> getSuccess() {
      return this.success;
    }

    public getCurrentSegments_result setSuccess(List<SegmentId> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<SegmentId>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentSegments_result)
        return this.equals((getCurrentSegments_result)that);
      return false;
    }

    public boolean equals(getCurrentSegments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentSegments_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentSegments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentSegments_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentSegments_resultStandardScheme getScheme() {
        return new getCurrentSegments_resultStandardScheme();
      }
    }

    private static class getCurrentSegments_resultStandardScheme extends StandardScheme<getCurrentSegments_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                  struct.success = new ArrayList<SegmentId>(_list20.size);
                  SegmentId _elem21;
                  for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                  {
                    _elem21 = new SegmentId();
                    _elem21.read(iprot);
                    struct.success.add(_elem21);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (SegmentId _iter23 : struct.success)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentSegments_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentSegments_resultTupleScheme getScheme() {
        return new getCurrentSegments_resultTupleScheme();
      }
    }

    private static class getCurrentSegments_resultTupleScheme extends TupleScheme<getCurrentSegments_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (SegmentId _iter24 : struct.success)
            {
              _iter24.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentSegments_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<SegmentId>(_list25.size);
            SegmentId _elem26;
            for (int _i27 = 0; _i27 < _list25.size; ++_i27)
            {
              _elem26 = new SegmentId();
              _elem26.read(iprot);
              struct.success.add(_elem26);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPositions_args implements org.apache.thrift.TBase<getPositions_args, getPositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositions_args");

    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPositions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPositions_argsTupleSchemeFactory());
    }

    private String stream; // required
    private long timestamp; // required
    private int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM((short)1, "stream"),
      TIMESTAMP((short)2, "timestamp"),
      COUNT((short)3, "count");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM
            return STREAM;
          case 2: // TIMESTAMP
            return TIMESTAMP;
          case 3: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositions_args.class, metaDataMap);
    }

    public getPositions_args() {
    }

    public getPositions_args(
      String stream,
      long timestamp,
      int count)
    {
      this();
      this.stream = stream;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPositions_args(getPositions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      this.timestamp = other.timestamp;
      this.count = other.count;
    }

    public getPositions_args deepCopy() {
      return new getPositions_args(this);
    }

    @Override
    public void clear() {
      this.stream = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public String getStream() {
      return this.stream;
    }

    public getPositions_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public getPositions_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public getPositions_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM:
        return getStream();

      case TIMESTAMP:
        return getTimestamp();

      case COUNT:
        return getCount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM:
        return isSetStream();
      case TIMESTAMP:
        return isSetTimestamp();
      case COUNT:
        return isSetCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPositions_args)
        return this.equals((getPositions_args)that);
      return false;
    }

    public boolean equals(getPositions_args that) {
      if (that == null)
        return false;

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_timestamp = true;
      list.add(present_timestamp);
      if (present_timestamp)
        list.add(timestamp);

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPositions_args(");
      boolean first = true;

      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPositions_argsStandardSchemeFactory implements SchemeFactory {
      public getPositions_argsStandardScheme getScheme() {
        return new getPositions_argsStandardScheme();
      }
    }

    private static class getPositions_argsStandardScheme extends StandardScheme<getPositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPositions_argsTupleSchemeFactory implements SchemeFactory {
      public getPositions_argsTupleScheme getScheme() {
        return new getPositions_argsTupleScheme();
      }
    }

    private static class getPositions_argsTupleScheme extends TupleScheme<getPositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStream()) {
          optionals.set(0);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

  }

  public static class getPositions_result implements org.apache.thrift.TBase<getPositions_result, getPositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPositions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPositions_resultTupleSchemeFactory());
    }

    private List<Position> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPositions_result.class, metaDataMap);
    }

    public getPositions_result() {
    }

    public getPositions_result(
      List<Position> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPositions_result(getPositions_result other) {
      if (other.isSetSuccess()) {
        List<Position> __this__success = new ArrayList<Position>(other.success.size());
        for (Position other_element : other.success) {
          __this__success.add(new Position(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPositions_result deepCopy() {
      return new getPositions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Position> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Position elem) {
      if (this.success == null) {
        this.success = new ArrayList<Position>();
      }
      this.success.add(elem);
    }

    public List<Position> getSuccess() {
      return this.success;
    }

    public getPositions_result setSuccess(List<Position> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Position>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPositions_result)
        return this.equals((getPositions_result)that);
      return false;
    }

    public boolean equals(getPositions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPositions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPositions_resultStandardSchemeFactory implements SchemeFactory {
      public getPositions_resultStandardScheme getScheme() {
        return new getPositions_resultStandardScheme();
      }
    }

    private static class getPositions_resultStandardScheme extends StandardScheme<getPositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.success = new ArrayList<Position>(_list28.size);
                  Position _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = new Position();
                    _elem29.read(iprot);
                    struct.success.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Position _iter31 : struct.success)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPositions_resultTupleSchemeFactory implements SchemeFactory {
      public getPositions_resultTupleScheme getScheme() {
        return new getPositions_resultTupleScheme();
      }
    }

    private static class getPositions_resultTupleScheme extends TupleScheme<getPositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Position _iter32 : struct.success)
            {
              _iter32.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Position>(_list33.size);
            Position _elem34;
            for (int _i35 = 0; _i35 < _list33.size; ++_i35)
            {
              _elem34 = new Position();
              _elem34.read(iprot);
              struct.success.add(_elem34);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updatePositions_args implements org.apache.thrift.TBase<updatePositions_args, updatePositions_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositions_args");

    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POSITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("positions", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePositions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePositions_argsTupleSchemeFactory());
    }

    private String stream; // required
    private List<Position> positions; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM((short)1, "stream"),
      POSITIONS((short)2, "positions");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM
            return STREAM;
          case 2: // POSITIONS
            return POSITIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITIONS, new org.apache.thrift.meta_data.FieldMetaData("positions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositions_args.class, metaDataMap);
    }

    public updatePositions_args() {
    }

    public updatePositions_args(
      String stream,
      List<Position> positions)
    {
      this();
      this.stream = stream;
      this.positions = positions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePositions_args(updatePositions_args other) {
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      if (other.isSetPositions()) {
        List<Position> __this__positions = new ArrayList<Position>(other.positions.size());
        for (Position other_element : other.positions) {
          __this__positions.add(new Position(other_element));
        }
        this.positions = __this__positions;
      }
    }

    public updatePositions_args deepCopy() {
      return new updatePositions_args(this);
    }

    @Override
    public void clear() {
      this.stream = null;
      this.positions = null;
    }

    public String getStream() {
      return this.stream;
    }

    public updatePositions_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public int getPositionsSize() {
      return (this.positions == null) ? 0 : this.positions.size();
    }

    public java.util.Iterator<Position> getPositionsIterator() {
      return (this.positions == null) ? null : this.positions.iterator();
    }

    public void addToPositions(Position elem) {
      if (this.positions == null) {
        this.positions = new ArrayList<Position>();
      }
      this.positions.add(elem);
    }

    public List<Position> getPositions() {
      return this.positions;
    }

    public updatePositions_args setPositions(List<Position> positions) {
      this.positions = positions;
      return this;
    }

    public void unsetPositions() {
      this.positions = null;
    }

    /** Returns true if field positions is set (has been assigned a value) and false otherwise */
    public boolean isSetPositions() {
      return this.positions != null;
    }

    public void setPositionsIsSet(boolean value) {
      if (!value) {
        this.positions = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case POSITIONS:
        if (value == null) {
          unsetPositions();
        } else {
          setPositions((List<Position>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM:
        return getStream();

      case POSITIONS:
        return getPositions();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM:
        return isSetStream();
      case POSITIONS:
        return isSetPositions();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePositions_args)
        return this.equals((updatePositions_args)that);
      return false;
    }

    public boolean equals(updatePositions_args that) {
      if (that == null)
        return false;

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_positions = true && this.isSetPositions();
      boolean that_present_positions = true && that.isSetPositions();
      if (this_present_positions || that_present_positions) {
        if (!(this_present_positions && that_present_positions))
          return false;
        if (!this.positions.equals(that.positions))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_positions = true && (isSetPositions());
      list.add(present_positions);
      if (present_positions)
        list.add(positions);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositions()).compareTo(other.isSetPositions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positions, other.positions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePositions_args(");
      boolean first = true;

      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positions:");
      if (this.positions == null) {
        sb.append("null");
      } else {
        sb.append(this.positions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePositions_argsStandardSchemeFactory implements SchemeFactory {
      public updatePositions_argsStandardScheme getScheme() {
        return new updatePositions_argsStandardScheme();
      }
    }

    private static class updatePositions_argsStandardScheme extends StandardScheme<updatePositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                  struct.positions = new ArrayList<Position>(_list36.size);
                  Position _elem37;
                  for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                  {
                    _elem37 = new Position();
                    _elem37.read(iprot);
                    struct.positions.add(_elem37);
                  }
                  iprot.readListEnd();
                }
                struct.setPositionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        if (struct.positions != null) {
          oprot.writeFieldBegin(POSITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.positions.size()));
            for (Position _iter39 : struct.positions)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePositions_argsTupleSchemeFactory implements SchemeFactory {
      public updatePositions_argsTupleScheme getScheme() {
        return new updatePositions_argsTupleScheme();
      }
    }

    private static class updatePositions_argsTupleScheme extends TupleScheme<updatePositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStream()) {
          optionals.set(0);
        }
        if (struct.isSetPositions()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetPositions()) {
          {
            oprot.writeI32(struct.positions.size());
            for (Position _iter40 : struct.positions)
            {
              _iter40.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.positions = new ArrayList<Position>(_list41.size);
            Position _elem42;
            for (int _i43 = 0; _i43 < _list41.size; ++_i43)
            {
              _elem42 = new Position();
              _elem42.read(iprot);
              struct.positions.add(_elem42);
            }
          }
          struct.setPositionsIsSet(true);
        }
      }
    }

  }

  public static class updatePositions_result implements org.apache.thrift.TBase<updatePositions_result, updatePositions_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePositions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePositions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePositions_resultTupleSchemeFactory());
    }

    private List<Position> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Position.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePositions_result.class, metaDataMap);
    }

    public updatePositions_result() {
    }

    public updatePositions_result(
      List<Position> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePositions_result(updatePositions_result other) {
      if (other.isSetSuccess()) {
        List<Position> __this__success = new ArrayList<Position>(other.success.size());
        for (Position other_element : other.success) {
          __this__success.add(new Position(other_element));
        }
        this.success = __this__success;
      }
    }

    public updatePositions_result deepCopy() {
      return new updatePositions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Position> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Position elem) {
      if (this.success == null) {
        this.success = new ArrayList<Position>();
      }
      this.success.add(elem);
    }

    public List<Position> getSuccess() {
      return this.success;
    }

    public updatePositions_result setSuccess(List<Position> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Position>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePositions_result)
        return this.equals((updatePositions_result)that);
      return false;
    }

    public boolean equals(updatePositions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatePositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePositions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePositions_resultStandardSchemeFactory implements SchemeFactory {
      public updatePositions_resultStandardScheme getScheme() {
        return new updatePositions_resultStandardScheme();
      }
    }

    private static class updatePositions_resultStandardScheme extends StandardScheme<updatePositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                  struct.success = new ArrayList<Position>(_list44.size);
                  Position _elem45;
                  for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                  {
                    _elem45 = new Position();
                    _elem45.read(iprot);
                    struct.success.add(_elem45);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Position _iter47 : struct.success)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePositions_resultTupleSchemeFactory implements SchemeFactory {
      public updatePositions_resultTupleScheme getScheme() {
        return new updatePositions_resultTupleScheme();
      }
    }

    private static class updatePositions_resultTupleScheme extends TupleScheme<updatePositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Position _iter48 : struct.success)
            {
              _iter48.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Position>(_list49.size);
            Position _elem50;
            for (int _i51 = 0; _i51 < _list49.size; ++_i51)
            {
              _elem50 = new Position();
              _elem50.read(iprot);
              struct.success.add(_elem50);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getURI_args implements org.apache.thrift.TBase<getURI_args, getURI_args._Fields>, java.io.Serializable, Cloneable, Comparable<getURI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURI_args");

    private static final org.apache.thrift.protocol.TField STREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("stream", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEGMENT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentNumber", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURI_argsTupleSchemeFactory());
    }

    private String stream; // required
    private int segmentNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM((short)1, "stream"),
      SEGMENT_NUMBER((short)2, "segmentNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM
            return STREAM;
          case 2: // SEGMENT_NUMBER
            return SEGMENT_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEGMENTNUMBER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM, new org.apache.thrift.meta_data.FieldMetaData("stream", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEGMENT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("segmentNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURI_args.class, metaDataMap);
    }

    public getURI_args() {
    }

    public getURI_args(
      String stream,
      int segmentNumber)
    {
      this();
      this.stream = stream;
      this.segmentNumber = segmentNumber;
      setSegmentNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURI_args(getURI_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStream()) {
        this.stream = other.stream;
      }
      this.segmentNumber = other.segmentNumber;
    }

    public getURI_args deepCopy() {
      return new getURI_args(this);
    }

    @Override
    public void clear() {
      this.stream = null;
      setSegmentNumberIsSet(false);
      this.segmentNumber = 0;
    }

    public String getStream() {
      return this.stream;
    }

    public getURI_args setStream(String stream) {
      this.stream = stream;
      return this;
    }

    public void unsetStream() {
      this.stream = null;
    }

    /** Returns true if field stream is set (has been assigned a value) and false otherwise */
    public boolean isSetStream() {
      return this.stream != null;
    }

    public void setStreamIsSet(boolean value) {
      if (!value) {
        this.stream = null;
      }
    }

    public int getSegmentNumber() {
      return this.segmentNumber;
    }

    public getURI_args setSegmentNumber(int segmentNumber) {
      this.segmentNumber = segmentNumber;
      setSegmentNumberIsSet(true);
      return this;
    }

    public void unsetSegmentNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEGMENTNUMBER_ISSET_ID);
    }

    /** Returns true if field segmentNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetSegmentNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __SEGMENTNUMBER_ISSET_ID);
    }

    public void setSegmentNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEGMENTNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM:
        if (value == null) {
          unsetStream();
        } else {
          setStream((String)value);
        }
        break;

      case SEGMENT_NUMBER:
        if (value == null) {
          unsetSegmentNumber();
        } else {
          setSegmentNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM:
        return getStream();

      case SEGMENT_NUMBER:
        return getSegmentNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM:
        return isSetStream();
      case SEGMENT_NUMBER:
        return isSetSegmentNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURI_args)
        return this.equals((getURI_args)that);
      return false;
    }

    public boolean equals(getURI_args that) {
      if (that == null)
        return false;

      boolean this_present_stream = true && this.isSetStream();
      boolean that_present_stream = true && that.isSetStream();
      if (this_present_stream || that_present_stream) {
        if (!(this_present_stream && that_present_stream))
          return false;
        if (!this.stream.equals(that.stream))
          return false;
      }

      boolean this_present_segmentNumber = true;
      boolean that_present_segmentNumber = true;
      if (this_present_segmentNumber || that_present_segmentNumber) {
        if (!(this_present_segmentNumber && that_present_segmentNumber))
          return false;
        if (this.segmentNumber != that.segmentNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_stream = true && (isSetStream());
      list.add(present_stream);
      if (present_stream)
        list.add(stream);

      boolean present_segmentNumber = true;
      list.add(present_segmentNumber);
      if (present_segmentNumber)
        list.add(segmentNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStream()).compareTo(other.isSetStream());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStream()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream, other.stream);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSegmentNumber()).compareTo(other.isSetSegmentNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegmentNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentNumber, other.segmentNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURI_args(");
      boolean first = true;

      sb.append("stream:");
      if (this.stream == null) {
        sb.append("null");
      } else {
        sb.append(this.stream);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("segmentNumber:");
      sb.append(this.segmentNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURI_argsStandardSchemeFactory implements SchemeFactory {
      public getURI_argsStandardScheme getScheme() {
        return new getURI_argsStandardScheme();
      }
    }

    private static class getURI_argsStandardScheme extends StandardScheme<getURI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stream = iprot.readString();
                struct.setStreamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEGMENT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.segmentNumber = iprot.readI32();
                struct.setSegmentNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stream != null) {
          oprot.writeFieldBegin(STREAM_FIELD_DESC);
          oprot.writeString(struct.stream);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SEGMENT_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.segmentNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURI_argsTupleSchemeFactory implements SchemeFactory {
      public getURI_argsTupleScheme getScheme() {
        return new getURI_argsTupleScheme();
      }
    }

    private static class getURI_argsTupleScheme extends TupleScheme<getURI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStream()) {
          optionals.set(0);
        }
        if (struct.isSetSegmentNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStream()) {
          oprot.writeString(struct.stream);
        }
        if (struct.isSetSegmentNumber()) {
          oprot.writeI32(struct.segmentNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.stream = iprot.readString();
          struct.setStreamIsSet(true);
        }
        if (incoming.get(1)) {
          struct.segmentNumber = iprot.readI32();
          struct.setSegmentNumberIsSet(true);
        }
      }
    }

  }

  public static class getURI_result implements org.apache.thrift.TBase<getURI_result, getURI_result._Fields>, java.io.Serializable, Cloneable, Comparable<getURI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getURI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getURI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getURI_resultTupleSchemeFactory());
    }

    private SegmentUri success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SegmentUri.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getURI_result.class, metaDataMap);
    }

    public getURI_result() {
    }

    public getURI_result(
      SegmentUri success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getURI_result(getURI_result other) {
      if (other.isSetSuccess()) {
        this.success = new SegmentUri(other.success);
      }
    }

    public getURI_result deepCopy() {
      return new getURI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SegmentUri getSuccess() {
      return this.success;
    }

    public getURI_result setSuccess(SegmentUri success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SegmentUri)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getURI_result)
        return this.equals((getURI_result)that);
      return false;
    }

    public boolean equals(getURI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getURI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getURI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getURI_resultStandardSchemeFactory implements SchemeFactory {
      public getURI_resultStandardScheme getScheme() {
        return new getURI_resultStandardScheme();
      }
    }

    private static class getURI_resultStandardScheme extends StandardScheme<getURI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getURI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SegmentUri();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getURI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getURI_resultTupleSchemeFactory implements SchemeFactory {
      public getURI_resultTupleScheme getScheme() {
        return new getURI_resultTupleScheme();
      }
    }

    private static class getURI_resultTupleScheme extends TupleScheme<getURI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getURI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getURI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SegmentUri();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
